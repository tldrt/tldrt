#!/bin/sh

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-hvp] [-d OUTPUT-DIRECTORY] [FILE]...
Generate TLDRT publish directory using FILE.

    -h          Display this help and exit.
    -d          Specify output directory.
    -p          Create output directory if it does not exist.
    -v          Verbose mode. Can be used multiple times for increased
                verbosity.
EOF
}



#### ARGUMENT PARSING
VERBOSE=0
PARENT=0
OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "hvpd:" opt; do
    case "$opt" in
        h)  show_help
            exit 0
            ;;
        v)  VERBOSE=$((VERBOSE+1))
            ;;
        p)  PARENT=1
            ;;
        d)  ODP=$OPTARG
            ;;
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

#### PATH RESOLUTIONS
## Canonical path to working directory
WDC=$(pwd)
## Path to executable directory
XDP=$(dirname -- "$0")
## Canonical path to executable directory
XDC=`cd "$XDP"; pwd`
## Path to input file
if [ -z ${1+x} ]; then
    echo "No input file provided."
    exit 1
fi
if [ ! -f "$1" ]; then
    echo "$1 does not exist or is not a regular file."
    exit 1
fi
IFP="$1"
## Path to input directory
IDP=$(dirname -- "$IFP")
## Canonical path to input directory
IDC=`cd "$IDP"; pwd`
## Input file basename
IFB=$(basename -- "$IFP")
## Canonical path to input file
IFC="${IDC}/${IFB}"
## Input file name
IFN="${IFB%.*}"
## Input file extension
IFE="${IFB##*.}"
## Input file hash string
IFH=$(echo -n "$IFN" \
          | md5sum \
          | awk '{print substr($1,0,6)}')
## Color hash string
CLR=$(echo "${IFH}" | tr 'a-z' 'A-Z')
## Path to ouput directory
if [ -z ${ODP+x} ]; then
    ODP="$IDP"
fi
## Ensure & check path to ouput directory
if [ $PARENT == 1 ]; then
    mkdir -p $ODP
fi
if [ ! -d "$ODP" ]
then
    echo "$ODP does not exist or is not a regular file."
    echo "Call with '-p' switch if you want to create directory."
    exit 1
fi
## Canonical path to ouput directory
ODC=`cd "$ODP"; pwd`
## Canonical path to hash directory
HDC="${ODC}/${IFH}"
## Chapter head illustration path
IMG="${IDC}/${IFN}.jpg"
if [ ! -f "$IMG" ]; then
    IMG="${IDC}/${IFN}.png"
fi
if [ ! -f "$IMG" ]; then
    echo "No chapter head image found. Exiting."
    exit 1
    
fi

## Report path resolutions
if [ $VERBOSE  == 1 ]; then
    echo "Canonical path to working directory    : $WDC"
    echo "Path to executable directory           : $XDP"
    echo "Canonical path to executable directory : $XDC"
    echo "Path to input file                     : $IFP"
    echo "Path to input directory                : $IDP"
    echo "Canonical path to input directory      : $IDC"
    echo "Input file basename                    : $IFB"
    echo "Canonical path to input file           : $IFC"
    echo "Input file name                        : $IFN"
    echo "Input file extension                   : $IFE"
    echo "Input file hash string                 : $IFH"
    echo "Color hash string                      : $CLR"
    echo "Path to output directory               : $IDP"
    echo "Canonical path to output directory     : $IDC"
    echo "Canonical path to hash directory       : $HDC"
    echo "Canonical path to hash directory       : $HDC"
    echo "Path to chapter head illustration      : $IMG"
fi

echo "Creating $HDC directory."
mkdir -p $HDC

echo "Creating STAMP at $HDC/images."
mkdir -p "$HDC/images"
MAGICK_OCL_DEVICE=OFF \
convert -antialias -size 512x320 "$XDC/stamp_bg.png" \
        -stroke none -fill "#${CLR}" \
        -draw "rectangle 208,80 304,176" \
        -font "$XDC/fonts/CatenaryStamp.ttf" \
        -kerning 40 -fill '#0d65cf' \
        -pointsize 60 -gravity south \
        -draw "text 0,0 '#${CLR}'" \
        "$XDC/stamp_mask.png" -alpha copy \
        -compose DstOut -composite \
        "$HDC/images/${CLR}.png"

echo "Creating CHAPTER HEAD IMAGE at $HDC/images."
MAGICK_OCL_DEVICE=OFF \
convert "${IMG}" \
        -fuzz 15%% -trim +repage \
        -resize 560x360 -threshold 80% \
        -gravity center -extent 560x360 \
        -negate -alpha copy -negate \
        "${HDC}/images/ornament.png"

echo "Creating DOCUMENT at $HDC."
if [ $VERBOSE  == 1 ]; then
    echo -n "LaTeX search paths                     : "
    TEXINPUTS="${HDC}:${XDC}//:" kpsewhich -expand-var '$TEXINPUTS'
fi
TEXINPUTS="${HDC}//:${XDC}//:" \
         pandoc -f markdown -t latex \
         --latex-engine=xelatex \
         --template "$XDC/tldrt.latex" \
         --variable hash="${CLR}" \
         -o "${HDC}/${IFN}.pdf" "${IFC}"

## Required when running shell commands from inside LaTeX.
# --latex-engine-opt="--shell-escape" \
# --latex-engine-opt="--enable-write18" \

echo "Removing redundant directory $HDC/images."
rm -fr "$HDC/images"

echo "Copying STYLES to parent."
mkdir -p "$ODC/css"
cp -f "$XDC/tldrt.css" "$ODC/css"

echo "Creating THUMBNAIL at $HDC."
MAGICK_OCL_DEVICE=OFF \
convert -antialias -density 480 "$HDC/${IFN}.pdf[0]" \
        -quality 80 -gravity north \
        -crop 2400x1284+0+320 +repage \
        -resize 50% -flatten \
        "${XDC}/vignette.png" \
        -compose ColorBurn -composite \
        "${HDC}/thumbnail.jpg"

echo "Creating WRAPPER at $HDC."
pandoc -f markdown -t html \
       --template "$XDC/tldrt.html" \
       --variable root="tldrt.link" \
       --variable hash="${IFH}" \
       --variable analytics="UA-85639714-1" \
       --variable site="TLDRT" \
       --variable creator="TLDRT" \
       --variable filename="${IFN}" \
       -o "${HDC}/index.html" "${IFC}" \

# End of file
